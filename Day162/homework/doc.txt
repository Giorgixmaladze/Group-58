TCP
ყველაზე ხშირად HTTP-თან ერთად გამოყენებული სატრანსპორტო პროტოკოლი არის TCP. TCP ნიშნავს Transmission Control Protocol-ს (მონაცემთა გადაცემის საკონტროლო პროტოკოლი) და საშუალებას აძლევს ორ ჰოსტს (კომპიუტერს) დაუკავშირდნენ ერთმანეთს და გაცვალონ მონაცემთა ნაკადები, ამასთან ერთად უზრუნველყოფს, რომ მონაცემთა პაკეტები მიეწოდოს მიმღებს იმავე რიგით, რა რიგითაც ისინი გაიგზავნა. ეს ნიშნავს, რომ TCP უზრუნველყოფს პაკეტების სანდო და შეცდომების გარეშე გადაცემას, რაც მას მონაცემების ერთი ადგილიდან მეორეზე ძალიან სტაბილურად გადატანის საშუალებად აქცევს.


---------------------------------------------------------------------------------------------------------------------


UDP
UDP (User Datagram Protocol) შედარებით იშვიათად გამოყენებული სატრანსპორტო პროტოკოლია. ის მუშაობს კავშირის გარეშე კომუნიკაციის მოდელით, ანუ არ საჭიროებს(handshaking) პროცესს, რაც შეიძლება გამოიწვიოს შეტყობინებების მიწოდების არასანდოობა. შესაბამისად, UDP-ს არ გააჩნია მექანიზმი, რომლითაც უზრუნველყოფს შეტყობინებების მიწოდებას ან სწორ მიმდევრობას.
მიუხედავად იმისა, რომ ეს შეიძლება მინუსად ჩაეთვალოს გარკვეული ტიპის აპლიკაციებისთვის, სხვა აპლიკაციები, რომლებიც უსაფრთხოებასა და სანდოობაზე უფრო მეტად სიჩქარესა და ეფექტურობას ანიჭებენ უპირატესობას, ხშირად იყენებენ UDP-ს.




TLS (Transport Layer Security — სატრანსპორტო ფენის უსაფრთხოება) არის ფართოდ გამოყენებული უსაფრთხოების პროტოკოლი, რომელიც შექმნილია მონაცემების უსაფრთხო გადაცემის უზრუნველსაყოფად შიფრაციის მეშვეობით. TLS განვითარდა უფრო ძველი შიფრაციის პროტოკოლიდან, სახელად SSL (Secure Sockets Layer), რომელიც ახლა აღარ გამოიყენება და მის ნაცვლად გამოიყენება TLS. მიუხედავად იმისა, რომ ეს ორი პროტოკოლი ერთმანეთისგან განსხვავდება, ზოგჯერ ტერმინებს ერთმანეთის ნაცვლადაც იყენებენ.

HTTP-ის TLS-თან ერთად გამოყენება საშუალებას გაძლევთ გამოიყენოთ HTTPS (Hypertext Transfer Protocol Secure — ჰიპერტექსტის გადაცემის უსაფრთხო პროტოკოლი), რაც მიუთითებს დამატებითი უსაფრთხოების არსებობაზე.




HTTP/1.1
HTTP/1.1 იყო ერთ-ერთი პირველი ვერსია HTTP პროტოკოლიდან, რომელიც შეიქმნა და დაინერგა. ის მუშაობს ტექსტური სახით შეტყობინებების გაგზავნით. HTTP/1.1 ძირითადად გამოიყენება TCP-სთან ერთად და მონაცემთა გადაცემის სიჩქარის მხრივ არის ყველაზე ნელი HTTP ვერსიებს შორის.

HTTP/2
HTTP/2 არის HTTP/1.1-ის ძირეული განახლება, რომელიც შეიქმნა ვებგვერდების ჩატვირთვის დაგვიანების შესამცირებლად. ყველაზე მნიშვნელოვანი განსხვავება HTTP/1.1-ისგან არის ის, რომ HTTP/2-ს ყველა შეტყობინება ბინარულ ფორმატში გადააქვს და არა უბრალო ტექსტში.
ეს საშუალებას აძლევს HTTP/2-ს გამოიყენოს სხვადასხვა მონაცემთა გადაცემის ტექნიკა, მათ შორის უფრო პატარა მონაცემთა პაკეტების გაგზავნა, რაც ზრდის გადაცემის მოქნილობას. ასევე შესაძლებელია მხოლოდ ერთი კავშირის გამოყენება კომუნიკაციას შორის, მაშინ როცა HTTP/1.1 ხშირად საჭიროებს მრავალ კავშირს. HTTP/1.1-ის მსგავსად, HTTP/2-საც ტრანსპორტისთვის TCP იყენებს.

HTTP/3
HTTP/3 არის HTTP-ის მესამე ძირითადი ვერსია. მიუხედავად იმისა, რომ HTTP/3-სა და წინა ვერსიებს შორის ბევრი ტექნოლოგიური განსხვავებაა, ერთ-ერთი ყველაზე მნიშვნელოვანი არის ის, თუ როგორ მუშაობს პროტოკოლი დაკარგული პაკეტების შემთხვევაში. HTTP/3 ასევე განსხვავდება სატრანსპორტო პროტოკოლის გამოყენებით — ის იყენებს QUIC-ს, რომელიც UDP-ზე სპეციფიკურ კონტროლებს ახორციელებს. HTTP/3 ამჟამად ინტერნეტის სამუშაო პროექტის (Internet Draft) სტატუსშია.

რომელიც არ უნდა იყოს გამოყენებული ამ ვერსიებიდან და სატრანსპორტო პროტოკოლებიდან, შედეგი ერთია — ინფორმაციის გადაცემა მოთხოვნის (request) სახით და ამ მოთხოვნაზე პასუხის (response) სახით.










მოთხოვნები (Requests)
მოთხოვნები შედგება რამდენიმე ძირითადი ელემენტისგან, რომლებიც სერვერს აწვდიან საჭირო ინფორმაციას. ძირითადი ელემენტებია:

HTTP მეთოდი (HTTP Method)

მეთოდი ჩვეულებრივ არის ზმნა, მაგალითად GET და POST, ან არსებითი სახელი, როგორიცაა OPTIONS და HEAD.

ეს მეთოდები სერვერს აწვდიან ინფორმაციას მოთხოვნის მიზნის შესახებ და ეხმარებიან სწორად დამუშავებაში.

მაგალითად, HTTP მოთხოვნა GET მეთოდით ნიშნავს, რომ კლიენტს სურს რესურსის მიღება.

მხარდაჭერილი მეთოდების სია შეიძლება ვიპოვოთ http.METHODS თვისების მეშვეობით.

ბილიკი (Path)

მიუთითებს რესურსის მისამართს საიტის ძირეულ მისამართთან მიმართებით.

მაგალითად, მოთხოვნა GET https://codecademy.com/api/lessons ამოიღებს საერთო ნაწილებს (https:// და codecademy.com) და დატოვებს /api/lessons.

HTTP პროტოკოლის ვერსია (HTTP Protocol Version)

პროტოკოლის ვერსია, მაგალითად HTTP/1.1, HTTP/2 ან HTTP/3.

ჰედერები (Headers)

არჩევითია და გამოიყენება დამატებითი ინფორმაციის გადასაცემად, რაც სერვერს შეიძლება დასჭირდეს მოთხოვნის დასამუშავებლად.

არსებობს როგორც სტანდარტული ჰედერები, ასევე მომხმარებლის მიერ შექმნილი სპეციალური ჰედერები.

ტანი (Body)

შეიცავს მონაცემებს, რომლებიც სერვერს უნდა გადაეცეს მოთხოვნის დასამუშავებლად.

ყველა ტიპის მოთხოვნა არ იყენებს ტანს.

ყველაზე ხშირად ტანი გამოიყენება POST, PUT და PATCH მოთხოვნებში.

--------------------------------------------------------------------------------------------

პასუხები (Responses)
პასუხები სტრუქტურით ჰგავს მოთხოვნებს, მაგრამ რამდენიმე განსხვავება აქვს. ძირითადი ელემენტებია:

HTTP პროტოკოლის ვერსია (HTTP Protocol Version)

იგივე ვერსიის მითითება, რაც მოთხოვნაში.

სტატუსის კოდი (Status Code)

მიუთითებს, წარმატებით შესრულდა თუ არა მოთხოვნა და, წარუმატებლობის შემთხვევაში, რატომ არ შესრულდა.

სტატუსის შეტყობინება (Status Message)

მოკლე ტექსტური აღწერა სტატუსის კოდის შესახებ.

ჰედერები (Headers)

იგივე პრინციპით, როგორც მოთხოვნებში, მაგრამ გამოიყენება პასუხის დამატებითი ინფორმაციისთვის.

ტანი (Body)

შეიცავს მიღებულ რესურსთან დაკავშირებულ მონაცემებს.

ტანი არჩევითია და გამოიყენება მხოლოდ საჭიროების შემთხვევაში.

